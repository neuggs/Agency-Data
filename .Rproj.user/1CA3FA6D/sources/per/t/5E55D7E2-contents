---
title: "Naive Bayes Predictive Model"
author: "Frank Neugebauer"
date: "9/10/2019"
output: pdf_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(xlsx)
library(dplyr)
library(e1071)
library(caret)
```

# Agency Data Simple Naive Bayes Predictive Model

This uses a largely unalered simple Naive Bayes model to set a baseline for subsequent predictive models, which are create using other algorithms.

```{r}
# Read the original data set
agency_data_orig <- read.xlsx('./data/AgencyData_clean.xlsx', sheetIndex=1, stringsAsFactors=T)
```

## Data Setup

There are a couple of irrelevant attributes from the original set. Get rid of those and then setup the `train` and `test` data sets.

```{r}
# Trim the phat - i.e., data that's irrelevant
agency_data_used <- agency_data_orig[c(-1, -4)]
str(agency_data_used)

# Setup train and test data, 70% / 30%
train_ad <- sample_frac(agency_data_used, 0.7)
sid <- as.numeric(rownames(train_ad)) # because rownames() returns character
test_ad <- agency_data_used[-sid,]
```

## Build the Model

This step is set aside because with a big data set, it would be slow or put into a distributed system.

```{r}
nb_model <- naiveBayes(transaction_type~., data=train_ad)
```

## Conditional Probabilities

The model creates the conditional probabilities based on the training data. This output shows those, which is interesting unto itself.

```{r echo=FALSE}
nb_model$tables$account_type
nb_model$tables$assigned_agent
nb_model$tables$lob
nb_model$tables$master_company
nb_model$tables$effective_date # bin this
nb_model$tables$policy_term
nb_model$tables$policy_type
# create one for binned premium
nb_model$tables$rating_state
nb_model$tables$status
```
 
## Make Predictions

As with the model, this step can take some real time with a large data set, so it's segregated from processing / output.

```{r}
nb_predict <- predict(nb_model, test_ad)
```

## Show the Predictions

This is similar to the conditional probability, but applies it to show the actual predicted values.

```{r}
table(nb_predict, test_ad$account_type)
table(nb_predict, test_ad$assigned_agent)
table(nb_predict, test_ad$log)
table(nb_predict, test_ad$master_company)
#table(nb_predict, test_ad$effective_date) # bin this
table(nb_predict, test_ad$policy_term)
table(nb_predict, test_ad$policy_type)
table(nb_predict, test_ad$rating_state)
table(nb_predict, test_ad$status)
```

## Confusion Matrix

Build a simple confusion matrix and then plot it.

```{r}
confusion_matrix <- table(nb_predict, test_ad$transaction_type)
plot(confusion_matrix)
```

## Finally, Show Stats on the Confusion Matrix

```{r}
confusionMatrix(confusion_matrix)
```