library(xlsx)
library(dplyr)
library(e1071)
library(caret)

# Let's try Naive Bayes as-is with the important variables. This is admittedly a lazy
# attempt just to see what happens since Naive Bayes can handle categorical data.

# Read the original data set
agency_data_orig <- read.xlsx('./data/AgencyData_clean.xlsx', sheetIndex=1, stringsAsFactors=T)

# Trim the phat - i.e., data that's irrelevant
agency_data_used <- agency_data_orig[c(-1, -4)]
str(agency_data_used)

# Bin the effective dates
# Four bins for each quarter, all years fit into one of the four.
#bins <- rbin_manual(agency_data_used, effective_date, c())

# Setup train and test data, 70% / 30%
train_ad <- sample_frac(agency_data_used, 0.7)
sid <- as.numeric(rownames(train_ad)) # because rownames() returns character
test_ad <- agency_data_used[-sid,]

# Build the model and make predictions
# Conditional probabilities
nb_model <- naiveBayes(transaction_type~., data=train_ad)
nb_model$tables$account_type
nb_model$tables$assigned_agent
nb_model$tables$lob
nb_model$tables$master_company
#nb_model$tables$effective_date # bin this
nb_model$tables$policy_term
nb_model$tables$policy_type
# create one for binned premium
nb_model$tables$rating_state
nb_model$tables$status

foo <- agency_data_used[agency_data_used$annual_premium > 10000]
summary(agency_data_used$written_premium)

nb_predict <- predict(nb_model, test_ad)

# Show predictions per field
table(nb_predict, test_ad$account_type)
table(nb_predict, test_ad$assigned_agent)
table(nb_predict, test_ad$lob)
table(nb_predict, test_ad$master_company)
#table(nb_predict, test_ad$effective_date) # bin this
table(nb_predict, test_ad$policy_term)
table(nb_predict, test_ad$policy_type)
table(nb_predict, test_ad$rating_state)
table(nb_predict, test_ad$status)

confusion_matrix <- table(nb_predict, test_ad$transaction_type)
#plot(confusion_matrix)
con_matrix <- confusionMatrix(confusion_matrix)

typeof(con_matrix)
