knitr::opts_chunk$set(echo = TRUE)
# packages
library(xlsx)
# read the data
read.xlsx('AgencyData_clean', header=TRUE)
knitr::opts_chunk$set(echo = TRUE)
# packages
library(xlsx)
# read the data
read.xlsx('AgencyData_clean.xlsx', header=TRUE)
knitr::opts_chunk$set(echo = TRUE)
# packages
library(xlsx)
# read the data
read.xlsx('AgencyData_clean.xlsx', 1, header=TRUE)
knitr::opts_chunk$set(echo = TRUE)
# packages
library(xlsx)
# read the data
agency_data <- read.xlsx('AgencyData_clean.xlsx', 1, header=TRUE)
View(agency_data)
summary(agency_data)
knitr::opts_chunk$set(echo = TRUE)
# packages
library(xlsx)
packages.install('dataMaid')
install.packages('dataMaid')
library(dataMaid)
makeCodebook(agency_data)
View(agency_data)
View(agency_data)
source('~/GitHub/agency_data/prepare_data_scratchpad.r')
setwd("~/GitHub/agency_data")
source('~/GitHub/agency_data/prepare_data_scratchpad.r')
source('~/GitHub/agency_data/prepare_data_scratchpad.r')
source('~/GitHub/agency_data/prepare_data_scratchpad.r')
# Variable by variable analysis / preparation
# account_name
# Each instance is unique, which is expected given it's the insured name. This variable is not
# useful and should be removed.
agency_data <- agency_data_orig[!'account_name']
# Variable by variable analysis / preparation
# account_name
# Each instance is unique, which is expected given it's the insured name. This variable is not
# useful and should be removed.
agency_data <- agency_data_orig[-1]
View(agency_data)
View(agency_data_orig)
install.packages('e0171')
install.packages('e1071')
library(diplyr)
install.packages('diplyr')
install.packages('dplyr')
install.packages("dplyr")
train_ad <- sample_frac(agency_data_orig, 0.7)
sid <- as.numeric(rownames(train)) # because rownames() returns character
test_ad <- agency_data_orig[-sid,]
train_ad <- sample_frac(agency_data_orig, 0.7)
train_ad <- sample_frac(agency_data_orig, 0.7)
library(dplyr)
train_ad <- sample_frac(agency_data_orig, 0.7)
sid <- as.numeric(rownames(train)) # because rownames() returns character
sid <- as.numeric(rownames(train_ad)) # because rownames() returns character
test_ad <- agency_data_orig[-sid,]
# Trim the phat - i.e., data that's irrelevant
agency_data_used <- agency_data_orig[-1, -4]
View(agency_data_used)
agency_data_orig <- read_excel('./data/AgencyData_clean.xlsx')
# Variable by variable analysis / preparation
# account_name
# Each instance is unique, which is expected given it's the insured name. This variable is not
# useful and should be removed.
agency_data <- agency_data_orig[-1]
agency_data_orig <- read_excel('./data/AgencyData_clean.xlsx')
agency_data_orig <- read_excel('./data/AgencyData_clean.xlsx')
# Trim the phat - i.e., data that's irrelevant
agency_data_used <- agency_data_orig[-1]
View(agency_data_orig)
agency_data_orig <- read_excel('./data/AgencyData_clean.xlsx')
# Trim the phat - i.e., data that's irrelevant
agency_data_used <- agency_data_orig[-1, -4]
View(agency_data)
nb_default <- naiveBayes(transaction_type~., data=train_ad[,-4])
library(e1071)
nb_default <- naiveBayes(transaction_type~., data=train_ad[,-4])
View(nb_default)
default_pred <- predict(nb_default, test_ad, type="class")
table(default_pred, test_ad$response,dnn=c("Prediction","Actual"))
table(default_pred, test_ad$transaction_type,dnn=c("Prediction","Actual"))
default_pred <- predict(nb_default, test_ad, type="class")
nb_default <- naiveBayes(transaction_type~., data=train_ad)
default_pred <- predict(nb_default, test_ad, type="class")
View(test_ad)
# Build the model and make predictions
nb_model <- naiveBayes(transaction_type~., data=train_ad)
View(nb_model)
nb_model$tables$V2
nb_model$tables$status
View(nb_model)
nb_model$tables$account_type
nb_model$tables$assigned_agent
nb_model$tables$branch_name
View(agency_data_used)
library(readxl)
nb_model$tables$lob
nb_model$tables$master_company
nb_model$tables$effective_date
nb_model$tables$policy_term
nb_model$tables$policy_type
nb_model$tables$rating_state
nb_model$tables$status
default_pred <- predict(nb_model, test_ad, type="class")
View(test_ad)
# Setup train and test data, 70% / 30%
train_ad <- sample_frac(agency_data_used, 0.7)
sid <- as.numeric(rownames(train_ad)) # because rownames() returns character
test_ad <- agency_data_orig[-sid,]
# Build the model and make predictions
nb_model <- naiveBayes(transaction_type~., data=train_ad)
nb_model$tables$account_type
nb_model$tables$assigned_agent
nb_model$tables$lob
nb_model$tables$master_company
nb_model$tables$effective_date # bin this
nb_model$tables$policy_term
nb_model$tables$policy_type
# create one for binned premium
nb_model$tables$rating_state
nb_model$tables$status
default_pred <- predict(nb_model, test_ad, type="class")
o
# Read the original data set
agency_data_orig <- read_excel('./data/AgencyData_clean.xlsx')
# Trim the phat - i.e., data that's irrelevant
agency_data_used <- agency_data_orig[-1, -4]
# Setup train and test data, 70% / 30%
train_ad <- sample_frac(agency_data_used, 0.7)
sid <- as.numeric(rownames(train_ad)) # because rownames() returns character
test_ad <- agency_data_used[-sid,]
# Build the model and make predictions
nb_model <- naiveBayes(transaction_type~., data=train_ad)
nb_model$tables$account_type
nb_model$tables$assigned_agent
nb_model$tables$lob
nb_model$tables$master_company
nb_model$tables$effective_date # bin this
nb_model$tables$policy_term
nb_model$tables$policy_type
# create one for binned premium
nb_model$tables$rating_state
nb_model$tables$status
default_pred <- predict(nb_model, test_ad, type="class")
default_pred <- predict(nb_model, test_ad, type="raw")
View(default_pred)
default_pred <- predict(nb_model, test_ad)
typeof(train_ad$transaction_type)
str(agency_data_used)
str(agency_data_used)
# Read the original data set
agency_data_orig <- read_excel('./data/AgencyData_clean.xlsx')
# Trim the phat - i.e., data that's irrelevant
agency_data_used <- agency_data_orig[-1, -4]
View(agency_data_used)
# Read the original data set
agency_data_orig <- read_excel('./data/AgencyData_clean.xlsx')
# Trim the phat - i.e., data that's irrelevant
agency_data_used <- agency_data_orig[c(-1, -4)]
View(agency_data_used)
str(agency_data_used)
as.factor(agency_data_used$account_type)
str(agency_data_used)
agency_data_used$account_type <- as.factor(agency_data_used$account_type)
str(agency_data_used)
library(xlsx)
# Read the original data set
agency_data_orig <- read.xlsx('./data/AgencyData_clean.xlsx', stringsAsFactors=T)
# Read the original data set
agency_data_orig <- read.xlsx('./data/AgencyData_clean.xlsx', sheet=0, stringsAsFactors=T)
# Read the original data set
agency_data_orig <- read.xlsx('./data/AgencyData_clean.xlsx', 0, stringsAsFactors=T)
# Read the original data set
agency_data_orig <- read.xlsx('./data/AgencyData_clean.xlsx', 1, stringsAsFactors=T)
# Read the original data set
agency_data_orig <- read.xlsx('./data/AgencyData_clean.xlsx', sheetIndex=1, stringsAsFactors=T)
# Trim the phat - i.e., data that's irrelevant
agency_data_used <- agency_data_orig[c(-1, -4)]
str(agency_data_used)
agency_data_used$account_type <- as.factor(agency_data_used$account_type)
# Setup train and test data, 70% / 30%
train_ad <- sample_frac(agency_data_used, 0.7)
sid <- as.numeric(rownames(train_ad)) # because rownames() returns character
test_ad <- agency_data_used[-sid,]
# Build the model and make predictions
nb_model <- naiveBayes(transaction_type~., data=train_ad)
nb_model$tables$account_type
nb_model$tables$assigned_agent
nb_model$tables$lob
nb_model$tables$master_company
nb_model$tables$effective_date # bin this
nb_model$tables$policy_term
nb_model$tables$policy_type
# create one for binned premium
nb_model$tables$rating_state
nb_model$tables$status
default_pred <- predict(nb_model, test_ad)
default_pred
table(transaction_type_predict, agency_data_used$transaction_type)
transaction_type_predict <- predict(nb_model, test_ad)
table(transaction_type_predict, agency_data_used$transaction_type)
table(transaction_type_predict, test_ad$transaction_type)
table(transaction_type_predict, test_ad$account_type)
table(transaction_type_predict, test_ad$assigned_agent)
install.packages('caret')
confusion_matrix <- table(transaction_type_predict, agency_data_used$transaction_type)
nb_predict <- predict(nb_model, test_ad)
confusion_matrix <- table(nb_predict, test_ad$transaction_type)
library(caret)
plot(confusion_matrix)
confusionMatrix(confusion_matrix)
View(agency_data_used)
source('~/GitHub/agency_data/naive_bayes_model.R')
library(xlsx)
library(dplyr)
library(e1071)
library(caret)
# Let's try Naive Bayes as-is with the important variables. This is admittedly a lazy
# attempt just to see what happens since Naive Bayes can handle categorical data.
# Read the original data set
agency_data_orig <- read.xlsx('./data/AgencyData_clean.xlsx', sheetIndex=1, stringsAsFactors=T)
# Trim the phat - i.e., data that's irrelevant
agency_data_used <- agency_data_orig[c(-1, -4)]
str(agency_data_used)
# Setup train and test data, 70% / 30%
train_ad <- sample_frac(agency_data_used, 0.7)
sid <- as.numeric(rownames(train_ad)) # because rownames() returns character
test_ad <- agency_data_used[-sid,]
# Build the model and make predictions
# Conditional probabilities
nb_model <- naiveBayes(transaction_type~., data=train_ad)
nb_model$tables$account_type
nb_model$tables$assigned_agent
nb_model$tables$lob
nb_model$tables$master_company
#nb_model$tables$effective_date # bin this
nb_model$tables$policy_term
nb_model$tables$policy_type
# create one for binned premium
nb_model$tables$rating_state
nb_model$tables$status
nb_predict <- predict(nb_model, test_ad)
# Show predictions per field
table(nb_predict, test_ad$account_type)
table(nb_predict, test_ad$assigned_agent)
table(nb_predict, test_ad$log)
table(nb_predict, test_ad$master_company)
#table(nb_predict, test_ad$effective_date) # bin this
table(nb_predict, test_ad$policy_term)
table(nb_predict, test_ad$policy_type)
table(nb_predict, test_ad$rating_state)
table(nb_predict, test_ad$status)
confusion_matrix <- table(nb_predict, test_ad$transaction_type)
confusionMatrix(confusion_matrix)
table(nb_predict, test_ad$log)
View(agency_data_used)
source('~/.active-rstudio-document')
# KNN for premium and dates
library(class)
# KNN for premium and dates
# NOTE: the variables from the naive_bayes_model must be in memory for this to
# work correctly.
install.packages("sjPlot")
# KNN for premium and dates
# NOTE: the variables from the naive_bayes_model must be in memory for this to
# work correctly.
library(sjPlot)
sjc.elbow(agency_data_used$written_premium)
sjc.elbow(agency_data_used$written_premium)
lapply(agency_data_used$written_premium)
lapply(agency_data_used$written_premium, best_recom)
knn_written_premium <- knn(train_ad, test_ad, cl=agency_data_used$written_premium, k=5)
knn_written_premium <- knn(train_ad, test_ad, cl=train_ad$written_premium, k=5)
View(train_ad)
typeof(agency_data_used$written_premium)
summary(agency_data_used$written_premium)
knn_written_premium <- knn(train_ad$written_premium, test_ad$written_premium,
cl=train_ad$written_premium, k=5)
train_ad_knn <- sample_frac(agency_data_used, 0.5)
library(dplyr)
train_ad_knn <- sample_frac(agency_data_used, 0.5)
sid <- as.numeric(rownames(train_ad_knn)) # because rownames() returns character
test_ad_knn <- agency_data_used[-sid,]
sjc.elbow(test_ad_knn$written_premium)
knn_written_premium <- knn(train_ad_knn$written_premium, test_ad_knn$written_premium,
cl=train_ad_knn$written_premium, k=5)
sjc.elbow(data.frame(test_ad_knn$written_premium))
knn_written_premium <- knn(data.frame(train_ad), data.frame(test_ad)
cl=train_ad_knn$written_premium, k=3)
knn_written_premium <- knn(data.frame(train_ad), data.frame(test_ad),
cl=train_ad_knn$written_premium, k=3)
knn_written_premium <- knn(data.frame(train_ad), data.frame(test_ad),
cl=train_ad$written_premium, k=3)
knn_written_premium <- knn(data.frame(train_ad), data.frame(test_ad),
cl=data.frame(train_ad$written_premium), k=2)
knn_written_premium <- knn(data.frame(train_ad$written_premium),
data.frame(test_ad$written_premium),
cl=data.frame(train_ad$written_premium), k=2)
knn_written_premium <- knn(data.frame(train_ad$written_premium),
data.frame(test_ad$written_premium),
cl=data.frame(train_ad$written_premium), k=4)
train_prem <- data.frame(train_ad$written_premium)
test_prem <- data.frame(test.prem$written_premium)
test_prem <- data.frame(test_ad$written_premium)
knn_written_premium <- knn(train_prem,
test_prem,
cl=train_prem, k=4)
source('~/GitHub/agency_data/naive_bayes_model.R')
View(agency_data_used)
summary(agency_data_used$written_premium)
foo <- agency_data_used[written_premium > 10000]
foo <- agency_data_used[agency_data_used$written_premium > 10000]
foo <- agency_data_used[agency_data_used$annual_premium > 10000]
table(nb_predict, test_ad$account_type)
table(nb_predict, test_ad$assigned_agent)
table(nb_predict, test_ad$lob)
table(nb_predict, test_ad$master_company)
#table(nb_predict, test_ad$effective_date) # bin this
table(nb_predict, test_ad$policy_term)
table(nb_predict, test_ad$policy_type)
table(nb_predict, test_ad$rating_state)
table(nb_predict, test_ad$status)
confusion_matrix <- table(nb_predict, test_ad$transaction_type)
plot(confusion_matrix)
confusionMatrix(confusion_matrix)
library(xlsx)
library(dplyr)
library(e1071)
library(caret)
confusionMatrix(confusion_matrix)
library(xlsx)
library(dplyr)
library(e1071)
library(caret)
confusion_matrix <- table(nb_predict, test_ad$transaction_type)
plot(confusion_matrix)
confusionMatrix(confusion_matrix)
